@page "/contacts_index"
@inject ReservationsService ReservationsService
@inject IStringLocalizer<Resource> localizer
@using Reservation.Shared.Models
@* Localization for Automatic Translation using the browser language configuration *@
@localizer[@Message]
<h3>@localizer["Contacts"]</h3>
<button><a href="/contacts_edit/0">@localizer["New Contact"]</a></button>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>@localizer["Names"]</th>
            <th>@localizer["Birth Date"]</th>
            <th>@localizer["Contact Type"]</th>
            <th>@localizer["Phone Number"]</th>
            <th>@localizer["Actions"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in contacts)
        {
        <tr>
            <td>@item.Name</td>
            <td>@item.BirthDate.ToShortDateString()</td>
            <td>@item.ContactType.Name</td>
            <td>@item.PhoneNumber</td>
            <td>
                <button><a href="/contacts_edit/@item.Id">@localizer["Edit"]</a></button>
                <button @onclick="()=>Delete(item)">@localizer["Delete"]</button>
            </td>
        </tr>
        }
    </tbody>
</table>

@code {
    #region PROPERTIES
    private List<Contact> contacts = new();
    private string Message = "";
    private List<Action> actionsToRunAfterRender = new List<Action>();
    #endregion
    #region INITIALIZATION AND DISPOSAL
    protected override async Task OnInitializedAsync()
    {
        var results = await ReservationsService.GetContacts();
        if (results.contacts != null) contacts = results.contacts;
        else Message = results.Message;
    }
    #endregion
    #region ACTIONS
    private async Task Delete(Contact contact)
    {
        Message = await ReservationsService.DeleteContact(contact);
        if (Message.Contains("success", StringComparison.InvariantCultureIgnoreCase)) contacts.Remove(contact);
    }
    #endregion

}
