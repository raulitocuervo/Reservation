@page "/destinations_index"
@inject ReservationsService ReservationsService
@inject IStringLocalizer<Resource> localizer
@using Reservation.Shared.Models
@* Localization for Automatic Translation using the browser language configuration *@
@localizer[@Message]
<h3>@localizer["Destinations"]</h3>
<button><a href="/Destination_edit/0">@localizer["New Destination"]</a></button>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>@localizer["Names"]</th>
            <th>@localizer["Actions"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in destinations)
        {
            <tr>
                <td>@item.Name</td>
                <td>
                    <MudButton Link="@($"/destination_edit/{item.Id}")" Variant="Variant.Filled" Color="Color.Default">@localizer["Edit"]</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="()=>Delete(item)">@localizer["Delete"]</MudButton>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    #region PROPERTIES
    private List<Destination> destinations = new();
    private string Message = "";
    private List<Action> actionsToRunAfterRender = new List<Action>();
    #endregion
    #region INITIALIZATION AND DISPOSAL
    protected override async Task OnInitializedAsync()
    {
        var results = await ReservationsService.GetDestinations();
        if (results.destinations != null) destinations = results.destinations;
        else Message = results.Message;
    }

    #endregion
    #region ACTIONS
    private async Task Delete(Destination destination)
    {
        Message = await ReservationsService.DeleteDestination(destination);
        if (Message.Contains("success", StringComparison.InvariantCultureIgnoreCase)) destinations.Remove(destination);
    }
    #endregion

}
