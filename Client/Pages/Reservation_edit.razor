@page "/reservation_edit/{reservationId}"
@inject ReservationsService ReservationsService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager NavigationManager
@using Reservation.Shared.Models
<h3>
    @if (reservationId == "0")
    {@localizer["Create Reservation"]}
else
{ @localizer["Edit Reservation"]}
</h3>
@localizer[@Message]
<EditForm Model="@reservation" class="forms-sample" OnValidSubmit="SaveItem">
    <DataAnnotationsValidator />
    <hr />
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">@localizer["Destination"]</label>
        <div class="col-sm-10">
            <select class="form-control" @bind="@reservation.DestinationId" style="width:250px">
                <option value="null">@localizer["Select a destination"]</option>
                @foreach (var item in destinations)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">@localizer["Date"]</label>
        <div class="col-sm-10">
            <InputDate @bind-Value="reservation.Date" ParsingErrorMessage="@localizer["Must be a date"]" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">@localizer["Contact"]</label>
        <div class="col-sm-10">            
            <form class="form-inline" style="margin-right:4px;">
                <div class="form-group">                 
                <MudAutocomplete Variant="Variant.Outlined" style="width:250px;" T="Contact" Label="@localizer["Contact Name"]" @bind-Value="selectedContact" SearchFunc="@Search2"
                                 ResetValueOnEmptyText="@true"
                                 AdornmentIcon="@Icons.Material.Filled.SupervisedUserCircle" AdornmentColor="Color.Default" ToStringFunc="@(e=> e==null?null : $"{e.Name}")"/>
                    </div>
                <div class="form-group">                    
                    <MudSelect Placeholder="@localizer["Contact Type"]" @bind-Value="reservation.Contact.ContactType" Variant="Variant.Outlined" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" Style="width:250px;"
                               OffsetY="true" AdornmentIcon="@Icons.Material.Filled.People" AdornmentColor="Color.Default">
                        @foreach (var types in contactTypes)
                        {
                            <MudSelectItem  Value="@types"/>
                        }
                    </MudSelect>
                    <MudTextField Variant="Variant.Outlined" @bind-Value="reservation.Contact.PhoneNumber" AdornmentIcon="@Icons.Material.Filled.Phone" AdornmentColor="Color.Default" Placeholder="@localizer["Phone Number"]"></MudTextField>
                </div>
            </form>
        </div>
    </div>
    <div class="form-group row">
        <label for="email" class="col-sm-2 col-form-label">@localizer["Description"]</label>
        <div class="col-sm-10" @onfocusout="async()=>reservation.Description = await QuillHtml.GetHTML()">
            <BlazoredTextEditor @ref="@QuillHtml">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
                <EditorContent>@((MarkupString)reservation.Description)</EditorContent>
            </BlazoredTextEditor>
        </div>
    </div>
    <ValidationSummary />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error">@localizer["Send"]</MudButton>
</EditForm>

@code {
        #region PROPERTIES
        [Parameter] public string reservationId { get; set; }
    private Reservation reservation = new() { Date = DateTime.Now, Contact = new() };
    private List<ContactType> contactTypes = new();
    private List<Contact> contacts = new();
    private List<Destination> destinations = new();
    private BlazoredTextEditor QuillHtml;
    private string Message = "";
    public Contact selectedContact { get => reservation.Contact; set
        {
            reservation.Contact = value;
            reservation.ContactId = value.Id;
        } }
    #endregion
    #region INITIALIZATION AND DISPOSAL
    //Reusing the same form for both create and edit item
    protected override async Task OnInitializedAsync()
    {
        //Loading Contacts and Destinations
        contactTypes = (await ReservationsService.GetContactTypes()).contactTypes;
        contacts = (await ReservationsService.GetContacts()).contacts;
        destinations = (await ReservationsService.GetDestinations()).destinations;
        //Requesting existing Item from API using the Id (Edit)
        try
        {
            if (reservationId?.Length > 1)
            {
                var results = await ReservationsService.GetReservationId(Guid.Parse(reservationId));
                if (results.reservation != null) reservation = results.reservation;
                else Message = results.Message;
            }
        }
        catch (Exception ex)
        {
            Message = ex.Message;
        }
    }
    #endregion
    #region ACTIONS
    private async Task SaveItem()
    {
        //Fixing Autocomplete behaviour
        reservation.Contact = null;
        //Saving Reservation considering its Id for creation or edition
        var results = await ReservationsService.SaveReservation(reservation, reservationId?.Length < 2);
        //Navigate to Reservations' List Page
        if (results.issuccess) NavigationManager.NavigateTo("/");
        else Message = results.Message;
    }
    //Search contact by name
    private async Task<IEnumerable<Contact>> Search2(string value)
    {
        // if text is null or empty, don't return values (drop-down will not open)
        if (string.IsNullOrEmpty(value))
            return new Contact[0];
        return contacts.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    #endregion
}
