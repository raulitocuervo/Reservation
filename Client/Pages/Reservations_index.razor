@page "/reservations_index"
@inject ReservationsService ReservationsService
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<Resource> localizer
@using Reservation.Shared.Models
@implements IAsyncDisposable
@* Localization for Automatic Translation using the browser language configuration *@
@localizer[@Message]
<h3>@localizer["Reservations"]</h3>
<button><a href="/reservation_edit/0">@localizer["New Reservation"]</a></button>
<div class="form-group row">
    @Order
    <label>@localizer["Sort"]</label>
    <div class="col-sm-9">
        <select class="form-control" @bind="Order" style="width:250px">
            <option value="0">@localizer["By Date Ascending"]</option>
            <option value="1">@localizer["By Date Descending"]</option>
            <option value="2">@localizer["By Alphabetic Ascending"]</option>
            <option value="3">@localizer["By Alphabetic Descending"]</option>
            <option value="4">@localizer["By Ranking"]</option>
        </select>
    </div>
</div>
<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>@localizer["Destination"]</th>
            <th>@localizer["Date"]</th>
            <th>@localizer["Contact"]</th>
            <th>@localizer["Description"]</th>
            <th>@localizer["Actions"]</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in reservations)
        {
        <tr>
            <td>@item.Destination.Name</td>
            <td>@item.Date</td>
            <td>@item.Contact.Name</td>
            <td>@item.Description</td>
            <td>
                <button><a href="/reservation_edit/@item.Id">@localizer["Edit"]</a></button>
                <button @onclick="()=>Delete(item)">@localizer["Delete"]</button>
            </td>
        </tr>
        }
    </tbody>
</table>

@code {
    #region PROPERTIES
    private List<Reservation> reservations = new();
    private string Message = "";
    private int _order = 0;
    private List<Action> actionsToRunAfterRender = new List<Action>();
    public int Order
    {
        get => _order;
        set
        {
            _order = value;
            InvokeAsync(LoadData);
        }
    }
    #endregion
    #region INITIALIZATION AND DISPOSAL
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        //Adds invocation interops for JavaScript Datatable initialization, to be run after the page renders
        //actionsToRunAfterRender.Add(() => JSRuntime.InvokeVoidAsync("ActivateTableAll"));
    }

    //Loads DataTables Js invoking JavaScript Code
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        foreach (var actionToRun in actionsToRunAfterRender) actionToRun();
        actionsToRunAfterRender.Clear();
        return base.OnAfterRenderAsync(firstRender);
    }
    public async ValueTask DisposeAsync() => await JSRuntime.InvokeVoidAsync("RemoveTableAll");
    #endregion
    #region DATA LOAD
    private async Task LoadData()
    {
        var results = await ReservationsService.GetReservations(Order);
        if (results.reservations != null) reservations = results.reservations;
        else Message = results.Message;
        await InvokeAsync(StateHasChanged);
    }
    #endregion
    #region ACTIONS
    private async Task Delete(Reservation reservation)
    {
        Message = await ReservationsService.DeleteReservation(reservation);
        if (Message.Contains("success", StringComparison.InvariantCultureIgnoreCase)) reservations.Remove(reservation);
    }
    #endregion

}
