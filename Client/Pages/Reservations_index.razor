@page "/"
@inject ReservationsService ReservationsService
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager NavigationManager  
@using Reservation.Shared.Models
@* Localization for Automatic Translation using the browser language configuration *@
@localizer[@Message]
<h3>@localizer["Reservations"]</h3>
<div class="form-group row">
    <div class="col-sm-2">
        <MudButton Variant="Variant.Filled" Color="Color.Error" @onclick="@(()=>NavigationManager.NavigateTo("/reservation_edit/0"))">@localizer["New Reservation"]</MudButton>        
        <MudSelect Label="@localizer["Sort"]" @bind-Value="Order" OffsetY="true" AdornmentIcon="@Icons.Material.Filled.Sort" AdornmentColor="Color.Default">
            <MudSelectItem Value="0">@localizer["By Date Ascending"]</MudSelectItem>
            <MudSelectItem Value="1">@localizer["By Date Descending"]</MudSelectItem>
            <MudSelectItem Value="2">@localizer["By Alphabetic Ascending"]</MudSelectItem>
            <MudSelectItem Value="3">@localizer["By Alphabetic Descending"]</MudSelectItem>
            <MudSelectItem Value="4">@localizer["By Ranking"]</MudSelectItem>
        </MudSelect>
    </div>
</div>

<MudTable Items="@reservations" Striped="true" Bordered="true">
    <RowTemplate>
        <MudTd>
            <p><strong style="color: rgb(68, 68, 68);">@context.Destination.Name</strong></p>
            <strong style="color: rgb(136, 136, 136);"><em>@context.Date.ToLongDateString()</em></strong>
        </MudTd>
        <MudTd>
            <p>@localizer["Ranking"]</p>
            <MudRating SelectedValue=@context.Ranking Size="Size.Small" SelectedValueChanged="@((e)=>RankReservation(context, e))" />
        </MudTd>
        <MudTd>
            @localizer["Add to favorites"]
            <MudToggleIconButton Toggled="@context.Favorite" ToggledChanged="@((e)=>FavReservation(context, e))"
                                 Icon="@Icons.Material.Filled.FavoriteBorder" Color="@Color.Dark" Title="Off"
                                 ToggledIcon="@Icons.Material.Filled.Favorite" ToggledColor="@Color.Error" ToggledTitle="On" />
        </MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" Color="Color.Default" @onclick="@(()=>NavigationManager.NavigateTo($"/reservation_edit/{context.Id}"))">@localizer["Edit"]</MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.Left"/>
    </PagerContent>
</MudTable>

@code {
    #region PROPERTIES
    private List<Reservation> reservations = new();
    private string Message = "";
    private int _order = 0;
    private List<Action> actionsToRunAfterRender = new List<Action>();
    public int Order
    {
        get => _order;
        set
        {
            _order = value;
            InvokeAsync(LoadData);
        }
    }
    #endregion
    #region INITIALIZATION AND DISPOSAL
    protected override async Task OnInitializedAsync() => await LoadData();
    #endregion
    #region DATA LOAD
    private async Task LoadData()
    {
        var results = await ReservationsService.GetReservations(Order);
        if (results.reservations != null) reservations = results.reservations;
        else Message = results.Message;
        await InvokeAsync(StateHasChanged);
    }
    #endregion
    #region ACTIONS
    private async Task Delete(Reservation reservation)
    {
        Message = await ReservationsService.DeleteReservation(reservation);
        if (Message.Contains("success", StringComparison.InvariantCultureIgnoreCase)) reservations.Remove(reservation);
    }
    private async Task RankReservation(Reservation reservation, int value)
    {
        reservation.Ranking = value;
        await ReservationsService.SaveReservation(reservation, false);
    }
    private async Task FavReservation(Reservation reservation, bool value)
    {
        reservation.Favorite = value;
        await ReservationsService.SaveReservation(reservation, false);
    }
    #endregion
}
